@using courtesynotes.Models
@using courtesynotes.Data
@using Blazored.SessionStorage 
@inject NavigationManager NavManager
@inject ISessionStorageService StorageService

<EditForm Model="user" OnValidSubmit="HandleValidSubmit" class="userForm-modal">
    @status
    <DataAnnotationsValidator />
    <ValidationSummary></ValidationSummary>
    <label for="inputEmail">Email</label>
    <input type="text" @bind-value="user.Email" id="inputEmail" />
    <label for="inputPassword">Password</label>
    <input type="password" @bind-value="user.Password" />
    <button type="submit" class="login-button">Login</button>
    <p class="lead register-prompt">Don't have an account? Register <a href="" @onclick="ShowRegisterModal">here</a> to get started!</p>
</EditForm>

@code {
    private UserModel user = new();
    private string status;
    private UserHandelingService UserHandelingService = new();
    [CascadingParameter] private IModalService Modal { get; set; }
    [CascadingParameter] private BlazoredModalInstance ModalInstance { get; set; }
    private async Task HandleValidSubmit()
    {
        var login = await UserHandelingService.LoginUser(user.Email, user.Password);
        if (login == false)
        {
            status = "Email or password is incorrect";
        }
        else if (login == true)
        {
            SessionModel.Authorized = true;
            await StorageService.SetItemAsync("_username", user.Email);
            NavManager.NavigateTo("/dashboard", true);
        }
    }
    private async Task ShowRegisterModal()
    {
        await ModalInstance.CloseAsync();
        Modal.Show<RegisterComponent>("Register an account");
    }
}
