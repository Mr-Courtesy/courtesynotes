@using courtesynotes.Data
@using courtesynotes.Models
@using Blazored.SessionStorage
 
@inject NavigationManager NavManager
@inject ISessionStorageService StorageService

<EditForm Model="User" OnValidSubmit="HandleValidSubmit" class="userForm-modal">
    <DataAnnotationsValidator />
    <ValidationSummary></ValidationSummary>
    <label for="inputEmail">Email</label>
    <input type="text" @bind-value="User.Email" id="inputEmail" />
    <label for="inputPassword">Password</label>
    <input type="password" @bind-value="User.Password" />
    <button type="submit" class="login-button">Register</button>
    <p class="lead register-prompt">Already have an account? Login <a href="" @onclick="ShowLoginModal">here</a> to access your notes!</p>
</EditForm>

@code {
    [CascadingParameter] IModalService Modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    private UserHandelingService UserHandelingService = new();
    private UserModel User = new();
    private string status;

    private async Task HandleValidSubmit()
    {
        var register = await UserHandelingService.AddUser(User.Email, User.Password);
        if (register == true)
        {
            SessionModel.Authorized = true;
            await StorageService.SetItemAsync("_username", User.Email);
            NavManager.NavigateTo("/dashboard", true);
        }
    }
    private async Task ShowLoginModal()
    {
        await ModalInstance.CloseAsync();
        Modal.Show<LoginComponent>("Login");
    }
}
